name: 'Provision Infra'

on:
  push:
    branches:
     - main
    paths:
      - "terraform/**"
  pull_request:
  workflow_dispatch:

permissions:
  contents: "read"
  id-token: "write"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_VAR_snowflake: '{ private_key = "${{secrets.SNOWFLAKE_PRIVATE_KEY}}", private_key_passphrase = "${{secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE}}" }'
      SNOWFLAKE_ACCOUNT_NAME: ${{vars.SNOWFLAKE_ACCOUNT_NAME}}
      SNOWFLAKE_ORGANIZATION_NAME: ${{vars.SNOWFLAKE_ORGANIZATION_NAME}}
      SNOWFLAKE_USER: ${{vars.SNOWFLAKE_USER}}
      SNOWFLAKE_PRIVATE_KEY: ${{secrets.SNOWFLAKE_PRIVATE_KEY}}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE}}

    steps:
    - name: Echo Env Vars
      run: |
        echo "TF_VAR_snowflake: $TF_VAR_snowflake"

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # GCP authentication
    - uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCLOUD_KEYFILE_JSON }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd terraform && terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: cd terraform && terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd terraform && terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: cd terraform && terraform apply -auto-approve -input=false
